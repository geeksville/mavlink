#!/usr/bin/env python
'''
parse a MAVLink protocol XML file and generate a Squirrel implementation

Copyright Andrew Tridgell 2011
Released under GNU GPL version 3 or later
'''

import sys, textwrap, os
import mavparse, mavtemplate

t = mavtemplate.MAVTemplate()

def generate_preamble(outf, msgs, args, xml):
    print("Generating preamble")
    t.write(outf, """
/*
MAVLink protocol implementation (auto-generated by mavgen.py)
Squirrel/DroneScript version

Generated from: ${FILELIST}

Note: this file has been auto-generated. DO NOT EDIT
*/

const MAVProtocolVersion = "${WIRE_PROTOCOL_VERSION}"

""", {'FILELIST' : ",".join(args),
      'PROTOCOL_MARKER' : xml.protocol_marker,
      'crc_extra' : xml.crc_extra,
      'WIRE_PROTOCOL_VERSION' : xml.wire_protocol_version })

def generate_enums(outf, enums):
    print("Generating enums")
    outf.write("\n// enums\n")
    wrapper = textwrap.TextWrapper(initial_indent="", subsequent_indent="                        // ")
    for e in enums:
        outf.write("\n// %s\n" % e.name)
        
        for entry in e.entry:
            genconst(outf, entry.name, entry.value)
            # FIXME - use entry.description

def generate_message_ids(outf, msgs):
    print("Generating message IDs")
    outf.write("\n// message IDs\n")
    genconst(outf, "MSG_BAD_DATA", -1)
    for m in msgs:
        genconst(outf, "MSG_" + m.name.upper(), m.id)

def genconst(outf, name, v):
    outf.write("MAV.%s <- %d\n" % (name, v))

def generate_classes(dirname, msgs):
    '''Write each class to its own filename (each file named msgid.nut)'''
    print("Generating class definitions")
    for m in msgs:
        outf = open(dirname + "/" + str(m.id) + ".nut", "w")
        generate_class(outf, m)
        outf.close()

def generate_class(outf, m):
    print("Generating class definitions")
    wrapper = textwrap.TextWrapper(initial_indent="        ", subsequent_indent="        ")

    outf.write("""
/*
%s
*/
return class extends MAV.Message {
    constructor() {
        base.constructor()
    }
""" % (wrapper.fill(m.description.strip())))

    outf.write('    static classname = "%s"\n' % m.name)
    outf.write('    static crcExtra = %s\n' % m.crc_extra)
    if len(m.fieldnames) != 0:
        outf.write('    static fieldNames = ["%s"]\n' % '", "'.join(m.fieldnames))
    outf.write("\n")

    for f in m.fields:
        outf.write("    %s = 0\n" % (f.name))
    outf.write("\n")

    # FIXME - use a more code space efficient encoding?
    outf.write("    function packPayload(b) {\n")
    for f in m.ordered_fields:
        outf.write("        writea(b, %s, '%s', %s)\n" % (f.name, mavfmt(f), f.array_length))
    outf.write("    }\n")
    # FIXME - use crc_extra
    # FIXME - need to init arrays in constructor
    outf.write("    function unpackPayload(b) {\n")
    for f in m.ordered_fields:
        outf.write("        %s = reada(b, '%s', %s)\n" % (f.name, mavfmt(f), f.array_length))
    outf.write("    }\n")
    
    outf.write("}\n\n")

def mavfmt(field):
    '''work out the struct format for a type'''
    map = {
        'float'    : 'f',
        'double'   : 'd',
        'char'     : 'c',
        'int8_t'   : 'c',
        'uint8_t'  : 'b',
        'uint8_t_mavlink_version'  : 'b',
        'int16_t'  : 's',
        'uint16_t' : 'w',
        'int32_t'  : 'i',
        'uint32_t' : 'i',
        'int64_t'  : 'l',
        'uint64_t' : 'l',
        }

    return map[field.type]

def generate_dispatcher(outf, msgs):
    '''NO LONGER USED - we now construct table at runtime'''
    print("Generating dispatcher")

    for m in msgs:
        outf.write("MAV.Map[MAV_%s] <- MAV.%s\n" % (
            m.name.upper(), m.name))



def generate(basename, xml):
    '''generate complete Squirrel implemenation'''
    filename = basename + '/generated.nut'

    msgs = []
    enums = []
    filelist = []
    for x in xml:
        msgs.extend(x.message)
        enums.extend(x.enum)
        filelist.append(os.path.basename(x.filename))

    for m in msgs:
        if xml[0].little_endian:
            m.fmtstr = '<'
        else:
            m.fmtstr = '>'
        #for f in m.ordered_fields:
        #    m.fmtstr += mavfmt(f)
        m.order_map = [ 0 ] * len(m.fieldnames)
        for i in range(0, len(m.fieldnames)):
            m.order_map[i] = m.ordered_fieldnames.index(m.fieldnames[i])

    print("Generating %s" % filename)
    outf = open(filename, "w")
    generate_preamble(outf, msgs, filelist, xml[0])
    generate_enums(outf, enums)
    generate_message_ids(outf, msgs)
    generate_classes(basename, msgs)
    # generate_dispatcher(outf, msgs)
    outf.close()
    print("Generated %s OK" % filename)
